```{r}

library('dplyr')
library('corrplot')
library('caTools')
library('ggplot2')
library(caret)
library('rpart')
library('xgboost')
library('glmnet')
```

```{r}
sessionInfo()
```
```{r}
Airfare.data =  read.csv("Data.csv")
Airfare.data = Airfare.data[,-19]


dim(Airfare.data)  #638  18, meaning 638 rows and 18 columns
```

```{r}
str(Airfare.data)
```

```{r}
Airfare.data$FARE = as.numeric(substr(as.character(Airfare.data$FARE),2,10)) # To remove currency $

## S_INCOME AND E_INCOME are factors, we will need to convert it into number, and remove currency symbol

Airfare.data$S_INCOME = as.numeric(gsub("\\$|,","",Airfare.data$S_INCOME))
Airfare.data$E_INCOME = as.numeric(gsub("\\$|,","",Airfare.data$E_INCOME))

Airfare = Airfare.data[,5:18]                   # Removing the unwanted columns that have text values

dim(Airfare)      # Getting the dimension ( no of rows and columns in our data)
```

```{r}
summary(Airfare)   # Summary of data
```


```{r}
Airfare.corr = select_if(Airfare, is.numeric) # selecting the one which are numeric
coorelation = corrplot(cor(Airfare.corr), type = "upper", method = "number")
```

```{r}
plot(x = Airfare$DISTANCE, y = Airfare$FARE,type = "p", main = "Relation between Distance and Fair", xlab = "Dist between 2 airports", ylab = "Avg Price")
```

```{r}
plot(x = Airfare$COUPON, y = Airfare$FARE,type = "p", main = "Relation between No of Flights Stops and respective Fair", xlab = "No of Flights Stops", ylab = "Avg Price")
```

```{r}
#install.packages("caret", dependencies = c("Depends", "Suggests"))

# converting dummy variables
DummyVar = dummyVars("~.",data = Airfare)
Airfare = data.frame(predict(DummyVar, newdata = Airfare))

## FEAUTURE SCALING
Airfare[,-18] <- lapply(Airfare[,-18], function(x) if(is.numeric(x)){(x - min(x))/(max(x) - min(x))} else x)

# SPLITTING DATA INTO TRAINING AND TESTING SETS
sampleSplit = sample.split(Airfare,SplitRatio = 0.8)
Airfare.training = subset(Airfare, sampleSplit == TRUE)
Airfare.test = subset(Airfare, sampleSplit == FALSE)
```

Multiple linear regresion
```{r}
set.seed(100)
modelLr = lm(FARE ~., data = Airfare.training)
summary(modelLr)
```

```{r}
set.seed(100)
modelLR = lm(FARE ~ VACATION.No+SW.No+HI+E_INCOME+S_POP+E_POP+SLOT.Controlled+GATE.Constrained+DISTANCE+PAX, data = Airfare.training)
LR.predict = predict(modelLR, newdata = Airfare.test[,-18])

## Calculating Mean Squared Error
AccuracyLR = sum(abs(LR.predict - Airfare.test[,18]))/length(Airfare.test[,18])

## Plotting the graph
plot(modelLR)
```

desicion tree model
```{r}
set.seed(100)
modelDT = rpart(FARE ~.,data = Airfare.training)
DT.Predict = predict(modelDT, newdata = Airfare.test[,-18])

## Calculating Mean Squared Error       
AccuracyDT = sum(abs(DT.Predict - Airfare.test[,18]))/length(Airfare.test[,18]) 
```

extreme gradient boosting
```{r}
set.seed(100)

lab_matrix = as.matrix(Airfare.training$FARE)
data_trainX = as.matrix(Airfare.training[,-18])
dtrain = xgb.DMatrix(data = data_trainX, label = lab_matrix)
dim(as.matrix(Airfare.training$FARE))
```  

```{r}
dtest = xgb.DMatrix(data = as.matrix(Airfare.test[,-18]), label = as.matrix(Airfare.test$FARE))

# Defining the parameters
parameters = list(booster = "gblinear",
                  objective = "reg:linear",    
                  eta = 0.1,           #Vary btwn 0.1-0.3
                  nthread = 5,         #Increase this to improve speed
                  max_depth = 15,
                  lambda= 0.5,         #Vary between 0-3
                  alpha= 0.5,          #Vary between 0-3
                  min_child_weight= 2, #Vary btwn 1-10
                  eval_metric = "rmse")

model.Xgb = xgboost(params = parameters, data = dtrain, nrounds = 53)
```

```{r}
model.Predict = predict(model.Xgb, dtest)

AccuracyXgb = sum(abs(model.Predict - Airfare.test[,18]))/length(Airfare.test[,18]) 
```


```{r}
set.seed(100)
# The input must be a matrix in case of LASSO
Airfare_X = as.matrix(Airfare[,-18])
Airfare_Y = Airfare$FARE
lasso_fit = glmnet(x = Airfare_X, y = Airfare_Y,family ="gaussian",alpha = 1 )

plot(lasso_fit, xvar = "lambda", label = TRUE)
```

```{r}
# Cross validation to find value for la
cv_lasso = cv.glmnet(x = Airfare_X, y = Airfare_Y, family = "gaussian", alpha = 1, nfolds = 10)
plot(cv_lasso)
```

```{r}
# Predicting LASSO value, taking lambda's minimum value
Lasso.Predict = predict(lasso_fit,newx = Airfare_X, s=cv_lasso$lambda.min)
# Accuracy using the first LASSO method
AccuracyLS.min = sum(abs(Lasso.Predict - Airfare_Y))/length(Airfare_Y) #27.50271
# Predicting LASSO value, taking lambda's standard error of the minimum
Lasso.Predict1se = predict(lasso_fit, newx = Airfare_X, s=cv_lasso$lambda.1se)
# Accuracy using the second LASSO method
AccuracyLS.1se = sum(abs(Lasso.Predict1se - Airfare_Y))/length(Airfare_Y) #28.71035
```

SUMMARY
```{r}
MACHINE_LEARNING_MODELS = c("Multiple Linear Regression","Decision Tree Model","Extreme Gradient Boosting","LASSO Regression")
ERROR = c(AccuracyLR,AccuracyDT,AccuracyXgb,AccuracyLS.min)

df = data.frame(MACHINE_LEARNING_MODELS,ERROR)
df
```
